/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * SearchRequest
 */


public class SearchRequest {
  @JsonProperty("searchRequestConditions")
  private List<SearchRequestCondition> searchRequestConditions = null;

  @JsonProperty("searchRequestPagination")
  private SearchRequestPagination searchRequestPagination = null;

  @JsonProperty("searchRequestGroupBys")
  private List<String> searchRequestGroupBys = null;

  @JsonProperty("searchRequestFunctions")
  private List<SearchRequestFunction> searchRequestFunctions = null;

  @JsonProperty("type")
  private String type = null;

  /**
   * Gets or Sets searchEntity
   */
  public enum SearchEntityEnum {
    EXECUTION("Execution"),
    EXECUTIONTESTSUITE("ExecutionTestSuite"),
    EXECUTIONSTATISTICS("ExecutionStatistics"),
    EXECUTIONTESTMODULE("ExecutionTestModule"),
    EXECUTIONTESTRESULT("ExecutionTestResult"),
    EXECUTIONREQUEST("ExecutionRequest"),
    INCIDENT("Incident"),
    TESTCASE("TestCase"),
    TESTSUITE("TestSuite"),
    EXECUTIONTESTSTEP("ExecutionTestStep"),
    TESTPROJECT("TestProject"),
    JOB("Job"),
    RUNNINGTESTRUN("RunningTestRun"),
    PROJECT("Project"),
    APIKEY("ApiKey"),
    COMMENT("Comment"),
    TEAM("Team"),
    ORGANIZATION("Organization"),
    USERORGANIZATION("UserOrganization"),
    USERTEAM("UserTeam"),
    USERINVITATION("UserInvitation"),
    USERSSOINVITATION("UserSsoInvitation"),
    USERCONFIGURATION("UserConfiguration"),
    AGENT("Agent"),
    RUNCONFIGURATION("RunConfiguration"),
    RELEASE("Release"),
    TESTOBJECT("TestObject"),
    TESTOBJECTENTITY("TestObjectEntity"),
    TESTCASEEXECUTION("TestCaseExecution"),
    TESTCASEEXECUTIONSTATUS("TestCaseExecutionStatus"),
    RELEASESTATISTICSSTATUS("ReleaseStatisticsStatus"),
    TESTCASEEXECUTIONCOMPARISON("TestCaseExecutionComparison"),
    TESTCASEEXECUTIONCOMPARISONSTATISTICS("TestCaseExecutionComparisonStatistics"),
    TESTCASEPLATFORMSTATISTICS("TestCasePlatformStatistics"),
    SCHEDULER("Scheduler"),
    EXECUTIONANALYSIS("ExecutionAnalysis"),
    EXECUTIONTESTRESULTCATEGORY("ExecutionTestResultCategory"),
    EXECUTIONTESTRESULTGROUP("ExecutionTestResultGroup"),
    EXECUTIONTESTRESULTTESTOBJECTENTITY("ExecutionTestResultTestObjectEntity"),
    EXECUTIONFILE("ExecutionFile"),
    TESTSUITECOLLECTION("TestSuiteCollection"),
    TESTSUITECOLLECTIONENTITY("TestSuiteCollectionEntity"),
    TESTCASEPRIORITY("TestCasePriority"),
    EXTERNALCONNECTION("ExternalConnection"),
    PLATFORMSTATISTICS("PlatformStatistics"),
    TESTPROJECTFILE("TestProjectFile"),
    PROJECTSTATISTICS("ProjectStatistics"),
    PROJECTREQUIREMENTSTATISTIC("ProjectRequirementStatistic"),
    TESTCASEREQUIREMENTSTATISTIC("TestCaseRequirementStatistic"),
    USERORGANIZATIONFEATURE("UserOrganizationFeature"),
    MACHINE("Machine"),
    LICENSEKEY("LicenseKey"),
    K8SAGENT("K8SAgent"),
    CIRCLECIAGENT("CircleCiAgent"),
    JOBSUMMARY("JobSummary"),
    KATALONRECORDERBACKUP("KatalonRecorderBackup"),
    EXTERNALDEFECT("ExternalDefect"),
    EXTERNALREQUIREMENT("ExternalRequirement"),
    EXTERNALTRACEABILITY("ExternalTraceability"),
    REQUIREMENTTESTRUNCOVERAGE("RequirementTestRunCoverage"),
    WHITELISTIP("WhitelistIp"),
    KSSESSION("KsSession"),
    CIDASHBOARDSTATISTICS("CiDashboardStatistics"),
    CHECKPOINT("Checkpoint"),
    KEYESEXECUTION("KeyesExecution"),
    RECENTPROJECT("RecentProject"),
    JIRAISSUE("JiraIssue"),
    SLACKCONNECTION("SlackConnection"),
    BASELINE("Baseline"),
    BASELINECOLLECTION("BaselineCollection"),
    TESTCASEFLAKINESS("TestCaseFlakiness");

    private String value;

    SearchEntityEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SearchEntityEnum fromValue(String text) {
      for (SearchEntityEnum b : SearchEntityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("searchEntity")
  private SearchEntityEnum searchEntity = null;

  @JsonProperty("timeZone")
  private String timeZone = null;

  public SearchRequest searchRequestConditions(List<SearchRequestCondition> searchRequestConditions) {
    this.searchRequestConditions = searchRequestConditions;
    return this;
  }

  public SearchRequest addSearchRequestConditionsItem(SearchRequestCondition searchRequestConditionsItem) {
    if (this.searchRequestConditions == null) {
      this.searchRequestConditions = new ArrayList<SearchRequestCondition>();
    }
    this.searchRequestConditions.add(searchRequestConditionsItem);
    return this;
  }

   /**
   * Get searchRequestConditions
   * @return searchRequestConditions
  **/
  @Schema(description = "")
  public List<SearchRequestCondition> getSearchRequestConditions() {
    return searchRequestConditions;
  }

  public void setSearchRequestConditions(List<SearchRequestCondition> searchRequestConditions) {
    this.searchRequestConditions = searchRequestConditions;
  }

  public SearchRequest searchRequestPagination(SearchRequestPagination searchRequestPagination) {
    this.searchRequestPagination = searchRequestPagination;
    return this;
  }

   /**
   * Get searchRequestPagination
   * @return searchRequestPagination
  **/
  @Schema(description = "")
  public SearchRequestPagination getSearchRequestPagination() {
    return searchRequestPagination;
  }

  public void setSearchRequestPagination(SearchRequestPagination searchRequestPagination) {
    this.searchRequestPagination = searchRequestPagination;
  }

  public SearchRequest searchRequestGroupBys(List<String> searchRequestGroupBys) {
    this.searchRequestGroupBys = searchRequestGroupBys;
    return this;
  }

  public SearchRequest addSearchRequestGroupBysItem(String searchRequestGroupBysItem) {
    if (this.searchRequestGroupBys == null) {
      this.searchRequestGroupBys = new ArrayList<String>();
    }
    this.searchRequestGroupBys.add(searchRequestGroupBysItem);
    return this;
  }

   /**
   * Get searchRequestGroupBys
   * @return searchRequestGroupBys
  **/
  @Schema(description = "")
  public List<String> getSearchRequestGroupBys() {
    return searchRequestGroupBys;
  }

  public void setSearchRequestGroupBys(List<String> searchRequestGroupBys) {
    this.searchRequestGroupBys = searchRequestGroupBys;
  }

  public SearchRequest searchRequestFunctions(List<SearchRequestFunction> searchRequestFunctions) {
    this.searchRequestFunctions = searchRequestFunctions;
    return this;
  }

  public SearchRequest addSearchRequestFunctionsItem(SearchRequestFunction searchRequestFunctionsItem) {
    if (this.searchRequestFunctions == null) {
      this.searchRequestFunctions = new ArrayList<SearchRequestFunction>();
    }
    this.searchRequestFunctions.add(searchRequestFunctionsItem);
    return this;
  }

   /**
   * Get searchRequestFunctions
   * @return searchRequestFunctions
  **/
  @Schema(description = "")
  public List<SearchRequestFunction> getSearchRequestFunctions() {
    return searchRequestFunctions;
  }

  public void setSearchRequestFunctions(List<SearchRequestFunction> searchRequestFunctions) {
    this.searchRequestFunctions = searchRequestFunctions;
  }

  public SearchRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public SearchRequest searchEntity(SearchEntityEnum searchEntity) {
    this.searchEntity = searchEntity;
    return this;
  }

   /**
   * Get searchEntity
   * @return searchEntity
  **/
  @Schema(description = "")
  public SearchEntityEnum getSearchEntity() {
    return searchEntity;
  }

  public void setSearchEntity(SearchEntityEnum searchEntity) {
    this.searchEntity = searchEntity;
  }

  public SearchRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @Schema(description = "")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRequest searchRequest = (SearchRequest) o;
    return Objects.equals(this.searchRequestConditions, searchRequest.searchRequestConditions) &&
        Objects.equals(this.searchRequestPagination, searchRequest.searchRequestPagination) &&
        Objects.equals(this.searchRequestGroupBys, searchRequest.searchRequestGroupBys) &&
        Objects.equals(this.searchRequestFunctions, searchRequest.searchRequestFunctions) &&
        Objects.equals(this.type, searchRequest.type) &&
        Objects.equals(this.searchEntity, searchRequest.searchEntity) &&
        Objects.equals(this.timeZone, searchRequest.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchRequestConditions, searchRequestPagination, searchRequestGroupBys, searchRequestFunctions, type, searchEntity, timeZone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRequest {\n");

    sb.append("    searchRequestConditions: ").append(toIndentedString(searchRequestConditions)).append("\n");
    sb.append("    searchRequestPagination: ").append(toIndentedString(searchRequestPagination)).append("\n");
    sb.append("    searchRequestGroupBys: ").append(toIndentedString(searchRequestGroupBys)).append("\n");
    sb.append("    searchRequestFunctions: ").append(toIndentedString(searchRequestFunctions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    searchEntity: ").append(toIndentedString(searchEntity)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
