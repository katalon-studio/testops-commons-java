/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TriggerBuildParameter
 */


public class TriggerBuildParameter {
  @JsonProperty("downloadUrl")
  private String downloadUrl = null;

  @JsonProperty("command")
  private String command = null;

  @JsonProperty("environmentVariables")
  private List<EnvironmentVariable> environmentVariables = null;

  @JsonProperty("sessionId")
  private String sessionId = null;

  @JsonProperty("ksVersion")
  private String ksVersion = null;

  @JsonProperty("ksLocation")
  private String ksLocation = null;

  /**
   * Gets or Sets configType
   */
  public enum ConfigTypeEnum {
    TSC("TSC"),
    COMMAND("COMMAND"),
    GENERIC_COMMAND("GENERIC_COMMAND");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ConfigTypeEnum fromValue(String text) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("configType")
  private ConfigTypeEnum configType = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    KS("KS"),
    GIT("GIT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("gitRepositoryResource")
  private GitRepositoryResource gitRepositoryResource = null;

  public TriggerBuildParameter downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * Get downloadUrl
   * @return downloadUrl
  **/
  @Schema(description = "")
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }

  public TriggerBuildParameter command(String command) {
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @Schema(description = "")
  public String getCommand() {
    return command;
  }

  public void setCommand(String command) {
    this.command = command;
  }

  public TriggerBuildParameter environmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public TriggerBuildParameter addEnvironmentVariablesItem(EnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<EnvironmentVariable>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

   /**
   * Get environmentVariables
   * @return environmentVariables
  **/
  @Schema(description = "")
  public List<EnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }

  public TriggerBuildParameter sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

   /**
   * Get sessionId
   * @return sessionId
  **/
  @Schema(description = "")
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }

  public TriggerBuildParameter ksVersion(String ksVersion) {
    this.ksVersion = ksVersion;
    return this;
  }

   /**
   * Get ksVersion
   * @return ksVersion
  **/
  @Schema(description = "")
  public String getKsVersion() {
    return ksVersion;
  }

  public void setKsVersion(String ksVersion) {
    this.ksVersion = ksVersion;
  }

  public TriggerBuildParameter ksLocation(String ksLocation) {
    this.ksLocation = ksLocation;
    return this;
  }

   /**
   * Get ksLocation
   * @return ksLocation
  **/
  @Schema(description = "")
  public String getKsLocation() {
    return ksLocation;
  }

  public void setKsLocation(String ksLocation) {
    this.ksLocation = ksLocation;
  }

  public TriggerBuildParameter configType(ConfigTypeEnum configType) {
    this.configType = configType;
    return this;
  }

   /**
   * Get configType
   * @return configType
  **/
  @Schema(description = "")
  public ConfigTypeEnum getConfigType() {
    return configType;
  }

  public void setConfigType(ConfigTypeEnum configType) {
    this.configType = configType;
  }

  public TriggerBuildParameter type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TriggerBuildParameter gitRepositoryResource(GitRepositoryResource gitRepositoryResource) {
    this.gitRepositoryResource = gitRepositoryResource;
    return this;
  }

   /**
   * Get gitRepositoryResource
   * @return gitRepositoryResource
  **/
  @Schema(description = "")
  public GitRepositoryResource getGitRepositoryResource() {
    return gitRepositoryResource;
  }

  public void setGitRepositoryResource(GitRepositoryResource gitRepositoryResource) {
    this.gitRepositoryResource = gitRepositoryResource;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriggerBuildParameter triggerBuildParameter = (TriggerBuildParameter) o;
    return Objects.equals(this.downloadUrl, triggerBuildParameter.downloadUrl) &&
        Objects.equals(this.command, triggerBuildParameter.command) &&
        Objects.equals(this.environmentVariables, triggerBuildParameter.environmentVariables) &&
        Objects.equals(this.sessionId, triggerBuildParameter.sessionId) &&
        Objects.equals(this.ksVersion, triggerBuildParameter.ksVersion) &&
        Objects.equals(this.ksLocation, triggerBuildParameter.ksLocation) &&
        Objects.equals(this.configType, triggerBuildParameter.configType) &&
        Objects.equals(this.type, triggerBuildParameter.type) &&
        Objects.equals(this.gitRepositoryResource, triggerBuildParameter.gitRepositoryResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadUrl, command, environmentVariables, sessionId, ksVersion, ksLocation, configType, type, gitRepositoryResource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriggerBuildParameter {\n");

    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    ksVersion: ").append(toIndentedString(ksVersion)).append("\n");
    sb.append("    ksLocation: ").append(toIndentedString(ksLocation)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    gitRepositoryResource: ").append(toIndentedString(gitRepositoryResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
