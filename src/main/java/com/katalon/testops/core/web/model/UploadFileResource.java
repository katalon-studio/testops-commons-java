/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * UploadFileResource
 */


public class UploadFileResource {
  @JsonProperty("path")
  private String path = null;

  @JsonProperty("fileName")
  private String fileName = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    TSC_EXECUTION("TSC_EXECUTION"),
    TS_EXECUTION("TS_EXECUTION"),
    ATTACHMENT("ATTACHMENT"),
    PROPERTIES("PROPERTIES"),
    HAR("HAR"),
    UUID("UUID"),
    ZIP("ZIP"),
    BDD("BDD");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("base64Content")
  private String base64Content = null;

  @JsonProperty("fileHandleId")
  private Long fileHandleId = null;

  public UploadFileResource path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public UploadFileResource fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @Schema(description = "")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public UploadFileResource type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public UploadFileResource base64Content(String base64Content) {
    this.base64Content = base64Content;
    return this;
  }

   /**
   * Get base64Content
   * @return base64Content
  **/
  @Schema(description = "")
  public String getBase64Content() {
    return base64Content;
  }

  public void setBase64Content(String base64Content) {
    this.base64Content = base64Content;
  }

  public UploadFileResource fileHandleId(Long fileHandleId) {
    this.fileHandleId = fileHandleId;
    return this;
  }

   /**
   * Get fileHandleId
   * @return fileHandleId
  **/
  @Schema(description = "")
  public Long getFileHandleId() {
    return fileHandleId;
  }

  public void setFileHandleId(Long fileHandleId) {
    this.fileHandleId = fileHandleId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadFileResource uploadFileResource = (UploadFileResource) o;
    return Objects.equals(this.path, uploadFileResource.path) &&
        Objects.equals(this.fileName, uploadFileResource.fileName) &&
        Objects.equals(this.type, uploadFileResource.type) &&
        Objects.equals(this.base64Content, uploadFileResource.base64Content) &&
        Objects.equals(this.fileHandleId, uploadFileResource.fileHandleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, fileName, type, base64Content, fileHandleId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadFileResource {\n");

    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    base64Content: ").append(toIndentedString(base64Content)).append("\n");
    sb.append("    fileHandleId: ").append(toIndentedString(fileHandleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
