/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;

/**
 * TimeZoneResourceOffsetRulesTransitions
 */


public class TimeZoneResourceOffsetRulesTransitions {
  @JsonProperty("duration")
  private TimeZoneResourceOffsetRulesDuration duration = null;

  @JsonProperty("gap")
  private Boolean gap = null;

  @JsonProperty("overlap")
  private Boolean overlap = null;

  @JsonProperty("dateTimeAfter")
  private OffsetDateTime dateTimeAfter = null;

  @JsonProperty("instant")
  private OffsetDateTime instant = null;

  @JsonProperty("dateTimeBefore")
  private OffsetDateTime dateTimeBefore = null;

  public TimeZoneResourceOffsetRulesTransitions duration(TimeZoneResourceOffsetRulesDuration duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public TimeZoneResourceOffsetRulesDuration getDuration() {
    return duration;
  }

  public void setDuration(TimeZoneResourceOffsetRulesDuration duration) {
    this.duration = duration;
  }

  public TimeZoneResourceOffsetRulesTransitions gap(Boolean gap) {
    this.gap = gap;
    return this;
  }

   /**
   * Get gap
   * @return gap
  **/
  @Schema(description = "")
  public Boolean isGap() {
    return gap;
  }

  public void setGap(Boolean gap) {
    this.gap = gap;
  }

  public TimeZoneResourceOffsetRulesTransitions overlap(Boolean overlap) {
    this.overlap = overlap;
    return this;
  }

   /**
   * Get overlap
   * @return overlap
  **/
  @Schema(description = "")
  public Boolean isOverlap() {
    return overlap;
  }

  public void setOverlap(Boolean overlap) {
    this.overlap = overlap;
  }

  public TimeZoneResourceOffsetRulesTransitions dateTimeAfter(OffsetDateTime dateTimeAfter) {
    this.dateTimeAfter = dateTimeAfter;
    return this;
  }

   /**
   * Get dateTimeAfter
   * @return dateTimeAfter
  **/
  @Schema(description = "")
  public OffsetDateTime getDateTimeAfter() {
    return dateTimeAfter;
  }

  public void setDateTimeAfter(OffsetDateTime dateTimeAfter) {
    this.dateTimeAfter = dateTimeAfter;
  }

  public TimeZoneResourceOffsetRulesTransitions instant(OffsetDateTime instant) {
    this.instant = instant;
    return this;
  }

   /**
   * Get instant
   * @return instant
  **/
  @Schema(description = "")
  public OffsetDateTime getInstant() {
    return instant;
  }

  public void setInstant(OffsetDateTime instant) {
    this.instant = instant;
  }

  public TimeZoneResourceOffsetRulesTransitions dateTimeBefore(OffsetDateTime dateTimeBefore) {
    this.dateTimeBefore = dateTimeBefore;
    return this;
  }

   /**
   * Get dateTimeBefore
   * @return dateTimeBefore
  **/
  @Schema(description = "")
  public OffsetDateTime getDateTimeBefore() {
    return dateTimeBefore;
  }

  public void setDateTimeBefore(OffsetDateTime dateTimeBefore) {
    this.dateTimeBefore = dateTimeBefore;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeZoneResourceOffsetRulesTransitions timeZoneResourceOffsetRulesTransitions = (TimeZoneResourceOffsetRulesTransitions) o;
    return Objects.equals(this.duration, timeZoneResourceOffsetRulesTransitions.duration) &&
        Objects.equals(this.gap, timeZoneResourceOffsetRulesTransitions.gap) &&
        Objects.equals(this.overlap, timeZoneResourceOffsetRulesTransitions.overlap) &&
        Objects.equals(this.dateTimeAfter, timeZoneResourceOffsetRulesTransitions.dateTimeAfter) &&
        Objects.equals(this.instant, timeZoneResourceOffsetRulesTransitions.instant) &&
        Objects.equals(this.dateTimeBefore, timeZoneResourceOffsetRulesTransitions.dateTimeBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, gap, overlap, dateTimeAfter, instant, dateTimeBefore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeZoneResourceOffsetRulesTransitions {\n");

    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    gap: ").append(toIndentedString(gap)).append("\n");
    sb.append("    overlap: ").append(toIndentedString(overlap)).append("\n");
    sb.append("    dateTimeAfter: ").append(toIndentedString(dateTimeAfter)).append("\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    dateTimeBefore: ").append(toIndentedString(dateTimeBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
