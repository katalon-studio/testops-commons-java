/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;

/**
 * GitRepositoryResource
 */


public class GitRepositoryResource {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("testProjectId")
  private Long testProjectId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("repository")
  private String repository = null;

  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("projectId")
  private Long projectId = null;

  @JsonProperty("teamId")
  private Long teamId = null;

  @JsonProperty("createdAt")
  private OffsetDateTime createdAt = null;

  @JsonProperty("updatedAt")
  private OffsetDateTime updatedAt = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * Gets or Sets vcsType
   */
  public enum VcsTypeEnum {
    GITHUB("GITHUB"),
    GITLAB("GITLAB"),
    BITBUCKET("BITBUCKET"),
    OTHERS("OTHERS");

    private String value;

    VcsTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static VcsTypeEnum fromValue(String text) {
      for (VcsTypeEnum b : VcsTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("vcsType")
  private VcsTypeEnum vcsType = null;

  public GitRepositoryResource id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public GitRepositoryResource testProjectId(Long testProjectId) {
    this.testProjectId = testProjectId;
    return this;
  }

   /**
   * Get testProjectId
   * @return testProjectId
  **/
  @Schema(description = "")
  public Long getTestProjectId() {
    return testProjectId;
  }

  public void setTestProjectId(Long testProjectId) {
    this.testProjectId = testProjectId;
  }

  public GitRepositoryResource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GitRepositoryResource repository(String repository) {
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @Schema(description = "")
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }

  public GitRepositoryResource branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @Schema(description = "")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public GitRepositoryResource username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public GitRepositoryResource password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public GitRepositoryResource projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }

  public GitRepositoryResource teamId(Long teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @Schema(description = "")
  public Long getTeamId() {
    return teamId;
  }

  public void setTeamId(Long teamId) {
    this.teamId = teamId;
  }

  public GitRepositoryResource createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public GitRepositoryResource updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public GitRepositoryResource description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public GitRepositoryResource vcsType(VcsTypeEnum vcsType) {
    this.vcsType = vcsType;
    return this;
  }

   /**
   * Get vcsType
   * @return vcsType
  **/
  @Schema(description = "")
  public VcsTypeEnum getVcsType() {
    return vcsType;
  }

  public void setVcsType(VcsTypeEnum vcsType) {
    this.vcsType = vcsType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitRepositoryResource gitRepositoryResource = (GitRepositoryResource) o;
    return Objects.equals(this.id, gitRepositoryResource.id) &&
        Objects.equals(this.testProjectId, gitRepositoryResource.testProjectId) &&
        Objects.equals(this.name, gitRepositoryResource.name) &&
        Objects.equals(this.repository, gitRepositoryResource.repository) &&
        Objects.equals(this.branch, gitRepositoryResource.branch) &&
        Objects.equals(this.username, gitRepositoryResource.username) &&
        Objects.equals(this.password, gitRepositoryResource.password) &&
        Objects.equals(this.projectId, gitRepositoryResource.projectId) &&
        Objects.equals(this.teamId, gitRepositoryResource.teamId) &&
        Objects.equals(this.createdAt, gitRepositoryResource.createdAt) &&
        Objects.equals(this.updatedAt, gitRepositoryResource.updatedAt) &&
        Objects.equals(this.description, gitRepositoryResource.description) &&
        Objects.equals(this.vcsType, gitRepositoryResource.vcsType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, testProjectId, name, repository, branch, username, password, projectId, teamId, createdAt, updatedAt, description, vcsType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitRepositoryResource {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    testProjectId: ").append(toIndentedString(testProjectId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    vcsType: ").append(toIndentedString(vcsType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
