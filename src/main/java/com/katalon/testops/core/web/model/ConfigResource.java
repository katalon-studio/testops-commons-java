/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.*;

/**
 * ConfigResource
 */


public class ConfigResource {
  @JsonProperty("webSocketUrl")
  private String webSocketUrl = null;

  @JsonProperty("storeUrl")
  private String storeUrl = null;

  @JsonProperty("profiles")
  private List<String> profiles = null;

  @JsonProperty("stripePublicApi")
  private String stripePublicApi = null;

  @JsonProperty("buildVersion")
  private String buildVersion = null;

  @JsonProperty("commitId")
  private String commitId = null;

  @JsonProperty("sentryDsn")
  private String sentryDsn = null;

  @JsonProperty("sentryEnv")
  private String sentryEnv = null;

  @JsonProperty("serverUrl")
  private String serverUrl = null;

  @JsonProperty("maxExecutionComparison")
  private Long maxExecutionComparison = null;

  @JsonProperty("maxExecutionDownload")
  private Long maxExecutionDownload = null;

  @JsonProperty("agentDownloadUrls")
  private Map<String, String> agentDownloadUrls = null;

  @JsonProperty("subDomainPattern")
  private String subDomainPattern = null;

  @JsonProperty("cancellationSurveyUrl")
  private String cancellationSurveyUrl = null;

  @JsonProperty("usingSubDomain")
  private Boolean usingSubDomain = null;

  @JsonProperty("advancedFeatureEnabled")
  private Boolean advancedFeatureEnabled = null;

  public ConfigResource webSocketUrl(String webSocketUrl) {
    this.webSocketUrl = webSocketUrl;
    return this;
  }

   /**
   * Get webSocketUrl
   * @return webSocketUrl
  **/
  @Schema(description = "")
  public String getWebSocketUrl() {
    return webSocketUrl;
  }

  public void setWebSocketUrl(String webSocketUrl) {
    this.webSocketUrl = webSocketUrl;
  }

  public ConfigResource storeUrl(String storeUrl) {
    this.storeUrl = storeUrl;
    return this;
  }

   /**
   * Get storeUrl
   * @return storeUrl
  **/
  @Schema(description = "")
  public String getStoreUrl() {
    return storeUrl;
  }

  public void setStoreUrl(String storeUrl) {
    this.storeUrl = storeUrl;
  }

  public ConfigResource profiles(List<String> profiles) {
    this.profiles = profiles;
    return this;
  }

  public ConfigResource addProfilesItem(String profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<String>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

   /**
   * Get profiles
   * @return profiles
  **/
  @Schema(description = "")
  public List<String> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<String> profiles) {
    this.profiles = profiles;
  }

  public ConfigResource stripePublicApi(String stripePublicApi) {
    this.stripePublicApi = stripePublicApi;
    return this;
  }

   /**
   * Get stripePublicApi
   * @return stripePublicApi
  **/
  @Schema(description = "")
  public String getStripePublicApi() {
    return stripePublicApi;
  }

  public void setStripePublicApi(String stripePublicApi) {
    this.stripePublicApi = stripePublicApi;
  }

  public ConfigResource buildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
    return this;
  }

   /**
   * Get buildVersion
   * @return buildVersion
  **/
  @Schema(description = "")
  public String getBuildVersion() {
    return buildVersion;
  }

  public void setBuildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
  }

  public ConfigResource commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

   /**
   * Get commitId
   * @return commitId
  **/
  @Schema(description = "")
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }

  public ConfigResource sentryDsn(String sentryDsn) {
    this.sentryDsn = sentryDsn;
    return this;
  }

   /**
   * Get sentryDsn
   * @return sentryDsn
  **/
  @Schema(description = "")
  public String getSentryDsn() {
    return sentryDsn;
  }

  public void setSentryDsn(String sentryDsn) {
    this.sentryDsn = sentryDsn;
  }

  public ConfigResource sentryEnv(String sentryEnv) {
    this.sentryEnv = sentryEnv;
    return this;
  }

   /**
   * Get sentryEnv
   * @return sentryEnv
  **/
  @Schema(description = "")
  public String getSentryEnv() {
    return sentryEnv;
  }

  public void setSentryEnv(String sentryEnv) {
    this.sentryEnv = sentryEnv;
  }

  public ConfigResource serverUrl(String serverUrl) {
    this.serverUrl = serverUrl;
    return this;
  }

   /**
   * Get serverUrl
   * @return serverUrl
  **/
  @Schema(description = "")
  public String getServerUrl() {
    return serverUrl;
  }

  public void setServerUrl(String serverUrl) {
    this.serverUrl = serverUrl;
  }

  public ConfigResource maxExecutionComparison(Long maxExecutionComparison) {
    this.maxExecutionComparison = maxExecutionComparison;
    return this;
  }

   /**
   * Get maxExecutionComparison
   * @return maxExecutionComparison
  **/
  @Schema(description = "")
  public Long getMaxExecutionComparison() {
    return maxExecutionComparison;
  }

  public void setMaxExecutionComparison(Long maxExecutionComparison) {
    this.maxExecutionComparison = maxExecutionComparison;
  }

  public ConfigResource maxExecutionDownload(Long maxExecutionDownload) {
    this.maxExecutionDownload = maxExecutionDownload;
    return this;
  }

   /**
   * Get maxExecutionDownload
   * @return maxExecutionDownload
  **/
  @Schema(description = "")
  public Long getMaxExecutionDownload() {
    return maxExecutionDownload;
  }

  public void setMaxExecutionDownload(Long maxExecutionDownload) {
    this.maxExecutionDownload = maxExecutionDownload;
  }

  public ConfigResource agentDownloadUrls(Map<String, String> agentDownloadUrls) {
    this.agentDownloadUrls = agentDownloadUrls;
    return this;
  }

  public ConfigResource putAgentDownloadUrlsItem(String key, String agentDownloadUrlsItem) {
    if (this.agentDownloadUrls == null) {
      this.agentDownloadUrls = new HashMap<String, String>();
    }
    this.agentDownloadUrls.put(key, agentDownloadUrlsItem);
    return this;
  }

   /**
   * Get agentDownloadUrls
   * @return agentDownloadUrls
  **/
  @Schema(description = "")
  public Map<String, String> getAgentDownloadUrls() {
    return agentDownloadUrls;
  }

  public void setAgentDownloadUrls(Map<String, String> agentDownloadUrls) {
    this.agentDownloadUrls = agentDownloadUrls;
  }

  public ConfigResource subDomainPattern(String subDomainPattern) {
    this.subDomainPattern = subDomainPattern;
    return this;
  }

   /**
   * Get subDomainPattern
   * @return subDomainPattern
  **/
  @Schema(description = "")
  public String getSubDomainPattern() {
    return subDomainPattern;
  }

  public void setSubDomainPattern(String subDomainPattern) {
    this.subDomainPattern = subDomainPattern;
  }

  public ConfigResource cancellationSurveyUrl(String cancellationSurveyUrl) {
    this.cancellationSurveyUrl = cancellationSurveyUrl;
    return this;
  }

   /**
   * Get cancellationSurveyUrl
   * @return cancellationSurveyUrl
  **/
  @Schema(description = "")
  public String getCancellationSurveyUrl() {
    return cancellationSurveyUrl;
  }

  public void setCancellationSurveyUrl(String cancellationSurveyUrl) {
    this.cancellationSurveyUrl = cancellationSurveyUrl;
  }

  public ConfigResource usingSubDomain(Boolean usingSubDomain) {
    this.usingSubDomain = usingSubDomain;
    return this;
  }

   /**
   * Get usingSubDomain
   * @return usingSubDomain
  **/
  @Schema(description = "")
  public Boolean isUsingSubDomain() {
    return usingSubDomain;
  }

  public void setUsingSubDomain(Boolean usingSubDomain) {
    this.usingSubDomain = usingSubDomain;
  }

  public ConfigResource advancedFeatureEnabled(Boolean advancedFeatureEnabled) {
    this.advancedFeatureEnabled = advancedFeatureEnabled;
    return this;
  }

   /**
   * Get advancedFeatureEnabled
   * @return advancedFeatureEnabled
  **/
  @Schema(description = "")
  public Boolean isAdvancedFeatureEnabled() {
    return advancedFeatureEnabled;
  }

  public void setAdvancedFeatureEnabled(Boolean advancedFeatureEnabled) {
    this.advancedFeatureEnabled = advancedFeatureEnabled;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigResource configResource = (ConfigResource) o;
    return Objects.equals(this.webSocketUrl, configResource.webSocketUrl) &&
        Objects.equals(this.storeUrl, configResource.storeUrl) &&
        Objects.equals(this.profiles, configResource.profiles) &&
        Objects.equals(this.stripePublicApi, configResource.stripePublicApi) &&
        Objects.equals(this.buildVersion, configResource.buildVersion) &&
        Objects.equals(this.commitId, configResource.commitId) &&
        Objects.equals(this.sentryDsn, configResource.sentryDsn) &&
        Objects.equals(this.sentryEnv, configResource.sentryEnv) &&
        Objects.equals(this.serverUrl, configResource.serverUrl) &&
        Objects.equals(this.maxExecutionComparison, configResource.maxExecutionComparison) &&
        Objects.equals(this.maxExecutionDownload, configResource.maxExecutionDownload) &&
        Objects.equals(this.agentDownloadUrls, configResource.agentDownloadUrls) &&
        Objects.equals(this.subDomainPattern, configResource.subDomainPattern) &&
        Objects.equals(this.cancellationSurveyUrl, configResource.cancellationSurveyUrl) &&
        Objects.equals(this.usingSubDomain, configResource.usingSubDomain) &&
        Objects.equals(this.advancedFeatureEnabled, configResource.advancedFeatureEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(webSocketUrl, storeUrl, profiles, stripePublicApi, buildVersion, commitId, sentryDsn, sentryEnv, serverUrl, maxExecutionComparison, maxExecutionDownload, agentDownloadUrls, subDomainPattern, cancellationSurveyUrl, usingSubDomain, advancedFeatureEnabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigResource {\n");

    sb.append("    webSocketUrl: ").append(toIndentedString(webSocketUrl)).append("\n");
    sb.append("    storeUrl: ").append(toIndentedString(storeUrl)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    stripePublicApi: ").append(toIndentedString(stripePublicApi)).append("\n");
    sb.append("    buildVersion: ").append(toIndentedString(buildVersion)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    sentryDsn: ").append(toIndentedString(sentryDsn)).append("\n");
    sb.append("    sentryEnv: ").append(toIndentedString(sentryEnv)).append("\n");
    sb.append("    serverUrl: ").append(toIndentedString(serverUrl)).append("\n");
    sb.append("    maxExecutionComparison: ").append(toIndentedString(maxExecutionComparison)).append("\n");
    sb.append("    maxExecutionDownload: ").append(toIndentedString(maxExecutionDownload)).append("\n");
    sb.append("    agentDownloadUrls: ").append(toIndentedString(agentDownloadUrls)).append("\n");
    sb.append("    subDomainPattern: ").append(toIndentedString(subDomainPattern)).append("\n");
    sb.append("    cancellationSurveyUrl: ").append(toIndentedString(cancellationSurveyUrl)).append("\n");
    sb.append("    usingSubDomain: ").append(toIndentedString(usingSubDomain)).append("\n");
    sb.append("    advancedFeatureEnabled: ").append(toIndentedString(advancedFeatureEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
