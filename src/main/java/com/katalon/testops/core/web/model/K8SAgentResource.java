/*
 * Katalon TestOps API reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.katalon.testops.core.web.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * K8SAgentResource
 */


public class K8SAgentResource {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("certificateAuthority")
  private String certificateAuthority = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("namespace")
  private String namespace = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("token")
  private String token = null;

  @JsonProperty("cluster")
  private String cluster = null;

  @JsonProperty("region")
  private String region = null;

  @JsonProperty("accessKey")
  private String accessKey = null;

  @JsonProperty("privateAccessKey")
  private String privateAccessKey = null;

  @JsonProperty("teamId")
  private Long teamId = null;

  @JsonProperty("apiKey")
  private String apiKey = null;

  /**
   * Gets or Sets authenticationType
   */
  public enum AuthenticationTypeEnum {
    BASIC_AUTH("BASIC_AUTH"),
    BEARER_TOKEN("BEARER_TOKEN"),
    EKS_AUTH("EKS_AUTH");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AuthenticationTypeEnum fromValue(String text) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("authenticationType")
  private AuthenticationTypeEnum authenticationType = null;

  public K8SAgentResource id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public K8SAgentResource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public K8SAgentResource certificateAuthority(String certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @Schema(description = "")
  public String getCertificateAuthority() {
    return certificateAuthority;
  }

  public void setCertificateAuthority(String certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }

  public K8SAgentResource url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public K8SAgentResource namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public K8SAgentResource username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public K8SAgentResource password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public K8SAgentResource token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @Schema(description = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public K8SAgentResource cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }

  public K8SAgentResource region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public K8SAgentResource accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

   /**
   * Get accessKey
   * @return accessKey
  **/
  @Schema(description = "")
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }

  public K8SAgentResource privateAccessKey(String privateAccessKey) {
    this.privateAccessKey = privateAccessKey;
    return this;
  }

   /**
   * Get privateAccessKey
   * @return privateAccessKey
  **/
  @Schema(description = "")
  public String getPrivateAccessKey() {
    return privateAccessKey;
  }

  public void setPrivateAccessKey(String privateAccessKey) {
    this.privateAccessKey = privateAccessKey;
  }

  public K8SAgentResource teamId(Long teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @Schema(description = "")
  public Long getTeamId() {
    return teamId;
  }

  public void setTeamId(Long teamId) {
    this.teamId = teamId;
  }

  public K8SAgentResource apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

   /**
   * Get apiKey
   * @return apiKey
  **/
  @Schema(description = "")
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }

  public K8SAgentResource authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * Get authenticationType
   * @return authenticationType
  **/
  @Schema(description = "")
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    K8SAgentResource k8SAgentResource = (K8SAgentResource) o;
    return Objects.equals(this.id, k8SAgentResource.id) &&
        Objects.equals(this.name, k8SAgentResource.name) &&
        Objects.equals(this.certificateAuthority, k8SAgentResource.certificateAuthority) &&
        Objects.equals(this.url, k8SAgentResource.url) &&
        Objects.equals(this.namespace, k8SAgentResource.namespace) &&
        Objects.equals(this.username, k8SAgentResource.username) &&
        Objects.equals(this.password, k8SAgentResource.password) &&
        Objects.equals(this.token, k8SAgentResource.token) &&
        Objects.equals(this.cluster, k8SAgentResource.cluster) &&
        Objects.equals(this.region, k8SAgentResource.region) &&
        Objects.equals(this.accessKey, k8SAgentResource.accessKey) &&
        Objects.equals(this.privateAccessKey, k8SAgentResource.privateAccessKey) &&
        Objects.equals(this.teamId, k8SAgentResource.teamId) &&
        Objects.equals(this.apiKey, k8SAgentResource.apiKey) &&
        Objects.equals(this.authenticationType, k8SAgentResource.authenticationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, certificateAuthority, url, namespace, username, password, token, cluster, region, accessKey, privateAccessKey, teamId, apiKey, authenticationType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class K8SAgentResource {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    privateAccessKey: ").append(toIndentedString(privateAccessKey)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
